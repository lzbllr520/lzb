‘r@ü™assertions§code¥customTransformCache¨dependencies¢id§meta±moduleSideEffects¨originalCode±originalSourcemap´resolvedIdsÆsourcemapChainµsyntheticNamedExportsµtransformDependenciesÆtransformFiles®cacheAst‘rAê⁄Simport color from '../../util/color';
import bezierCurve from '../../bezierCurve/index';
import { deepClone } from '../plugin/util';
import allGraph from '../config/graphs';
import Graph from './graph.class';
// import { ErrorEvent, MessageEvents, ThreadWorkerGlobalScope, worker } from '@kit.ArkTS';
import animator from "@ohos.animator";
let lastTime = null;
export default class CRender {
    constructor(canvas, workerPort, info, chartId) {
        this.myWorker = null;
        if (!canvas) {
            console.error('CRender Missing parameters!');
            return;
        }
        // const ctx = canvas.getContext('2d')
        const { width, height } = info || canvas;
        const area = [width, height];
        // canvas.setAttribute('width', clientWidth)
        // canvas.setAttribute('height', clientHeight)
        this.chartId = chartId;
        this.ctx = canvas;
        this.area = area;
        this.animationStatus = false;
        this.animation = true;
        this.animationTimer = null;
        this.graphs = [];
        this.color = color;
        this.bezierCurve = bezierCurve;
        this.workerPort = workerPort;
        this.backAnimator = animator.create({
            duration: 1000 / 60,
            easing: "linear",
            delay: 0,
            fill: "forwards",
            direction: "normal",
            iterations: 1,
            begin: 0,
            end: 1
        });
    }
    clearArea() {
        const { area } = this;
        this.ctx.clearRect(0, 0, ...area);
    }
    add(config) {
        const time = Date.now();
        if (!config || !Object.keys(config).length) {
            console.error('add Missing parameters!');
            return;
        }
        const { name } = config;
        if (!name) {
            console.error('add Missing parameters!');
            return;
        }
        const graphConfig = allGraph.get(name);
        if (!graphConfig) {
            console.warn('No corresponding graph configuration found!');
            return;
        }
        const graph = new Graph(graphConfig, config);
        if (!graph.validator(graph))
            return;
        // graph.render = this
        this.graphs.push(graph);
        this.sortGraphsByIndex();
        // console.log('Êó∂Èó¥522', time522 - time)
        // this.drawAllGraph()
        return graph;
    }
    sortGraphsByIndex() {
        const { graphs } = this;
        graphs.sort((a, b) => {
            if (a.index > b.index)
                return 1;
            if (a.index === b.index)
                return 0;
            if (a.index < b.index)
                return -1;
        });
    }
    delGraph(graph) {
        if (!graph || typeof graph.delProcessor !== 'function')
            return;
        graph.delProcessor(this);
        this.graphs = this.graphs.filter(graph => graph);
        this.drawAllGraph();
    }
    delAllGraph() {
        this.graphs.forEach(graph => graph.delProcessor(this));
        this.graphs = this.graphs.filter(graph => graph);
        this.drawAllGraph();
    }
    drawAllGraph(flag = true) {
        const { workerPort, ctx } = this;
        this.clearArea();
        this.graphs.filter(graph => graph && graph.visible).forEach(graph => graph.drawProcessor(this, graph));
        if (workerPort) {
            // let image = ctx.transferToImageBitmap()
            // workerPort.postMessage({ myImage: image });
        }
    }
    launchAnimation() {
        const { animationStatus } = this;
        if (animationStatus)
            return;
        this.animationStatus = true;
        // this.myWorker = new worker.ThreadWorker('../../../workers/Worker.ets');
        // emitter.on('animation-' + this.chartId, () => {
        //   animation.call(this, () => {
        //     // this.animationStatus = false
        //     // resolve()
        //   }, Date.now())
        // })
        // return new Promise<void>(resolve => {
        //
        // })
        lastTime = Date.now();
        animation.call(this, () => {
            // this.animationStatus = false
            // resolve()
        }, lastTime);
        const that = this;
        this.backAnimator.onFinish = () => {
            const currTime = Date.now();
            animation.call(that, () => {
                // this.animationStatus = false
                // resolve()
            }, lastTime);
        };
        // this.backAnimator.play()
    }
    clone(graph) {
        // if (!graph) {
        //   graph = {}
        // }
        const style = graph.style.getStyle();
        let clonedGraph = { ...graph, style };
        delete clonedGraph.render;
        clonedGraph = deepClone(clonedGraph, true);
        return this.add(clonedGraph);
    }
    checkLinePoint(point, activeIndex, lineIndex) {
        point.graphs.forEach((item, i) => {
            item.forEach((linePointItem, index) => {
                if (!linePointItem.shape.oldR) {
                    linePointItem.shape.oldR = linePointItem.shape.r;
                }
                if (linePointItem.oldVisible === undefined) {
                    linePointItem.oldVisible = linePointItem.visible;
                }
                linePointItem.shape.r = linePointItem.shape.oldR;
                linePointItem.visible = linePointItem.oldVisible;
                if (lineIndex !== undefined ? lineIndex === i && index === activeIndex : index === activeIndex) {
                    if (!linePointItem.visible) {
                        linePointItem.visible = true;
                    }
                    linePointItem.shape.r *= 1.5;
                }
            });
        });
    }
    stopAnimation() {
        if (this.animationTimer) {
            clearInterval(this.animationTimer);
        }
        this.backAnimator.finish();
        this.animationStatus = false;
        lastTime = null;
    }
}
function animation(callback, timeStamp) {
    const { graphs, workerPort } = this;
    if (!this.animationStatus) {
        // this.backAnimator && this.backAnimator.cancel()
        this.backAnimator.finish();
        lastTime = null;
        if (this.myWorker) {
            this.myWorker.terminate();
            this.myWorker = null;
        }
        return;
    }
    if (!animationAble(graphs)) {
        // workerPort.close()
        // this.backAnimator && this.backAnimator.cancel()
        // this.backAnimator.finish()
        this.backAnimator.finish();
        lastTime = null;
        if (this.myWorker) {
            this.myWorker.terminate();
            this.myWorker = null;
        }
        this.animationStatus = false;
        return;
    }
    graphs.forEach(graph => graph.turnNextAnimationFrame(timeStamp));
    this.drawAllGraph();
    this.backAnimator.play();
    // if (this.animation) {
    //   this.animationTimer = requestAnimationFrame(animation.bind(this, callback, timeStamp), this.animation)
    // } else {
    //   animation.call(this, callback, timeStamp)
    // }
    // this.myWorker.postMessageWithSharedSendable({requestAnimationFrame: true, animation: this.animation, chartId: this.chartId});
}
function requestAnimationFrame(callback, animation) {
    const currTime = new Date().getTime();
    const timeToCall = animation ? Math.max(0, 30 - (currTime - lastTime)) : 0;
    const id = setTimeout(() => {
        callback(currTime + timeToCall);
    }, 1000 / 30);
    lastTime = currTime + timeToCall;
    return id;
}
function animationAble(graphs) {
    return graphs.find(graph => !graph.animationPause && graph.animationFrameState.length);
}
function mouseDown(e) {
    const { graphs } = this;
    const hoverGraph = graphs.find(graph => graph.status === 'hover');
    if (!hoverGraph)
        return;
    hoverGraph.status = 'active';
}
//# sourceMappingURL=crender.class.js.map¬ñŸ|D:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\util\color.tsŸÉD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\bezierCurve\index.tsŸÖD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\cRender\plugin\util.tsŸáD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\cRender\config\graphs.tsŸãD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\cRender\class\graph.class.tsŸ~ hvigor_ignore_D:_apps_deveco_devecostudio-windows-5.1.0.828_DevEco Studio_sdk_default_openharmony_ets_api_@ohos.animator.d.tsŸçD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\cRender\class\crender.class.ts‘rBò±isLocalDependencyØisNodeEntryFileßpkgPathßpkgName™pkgVersion±belongProjectPath±dependencyPkgInfo¨shouldEmitJs¬¬ŸZD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mcchartsÆ@mcui/mccharts•2.8.9∫D:\apps\deveco\tzb2025jbgs‘rCíßpkgName™pkgVersionÆ@mcui/mccharts•2.8.9√√⁄Îimport color from '../../util/color'
import bezierCurve from '../../bezierCurve/index'
import { deepClone } from '../plugin/util'

import allGraph from '../config/graphs'

import Graph from './graph.class'

import { emitter } from '@kit.BasicServicesKit';

// import { ErrorEvent, MessageEvents, ThreadWorkerGlobalScope, worker } from '@kit.ArkTS';

import { Animator as animator, AnimatorResult } from '@kit.ArkUI';

let lastTime = null;

export default class CRender {
  chartId: string;
  myWorker: null = null;
  ctx: any
  area: any[]
  animationStatus: boolean
  graphs: Graph[]
  color: {
    darken: (r: any, t?: number) => string;
    fade: (r: any, t?: number) => string;
    getColorFromRgbValue: (r: any) => string;
    getOpacity: (r: any) => number;
    getRgbValue: (r: any) => any;
    getRgbaValue: (r: any) => any;
    isHex: (r: any) => boolean;
    isRgb: (r: any) => boolean;
    isRgbOrRgba: (r: any) => boolean;
    isRgba: (r: any) => boolean;
    lighten: (r: any, t?: number) => string;
    toHex: (r: any) => any;
    toRgb: (r: any, t: any) => string
  }
  bezierCurve: {
    bezierCurveToPolyline: (bezierCurve: any, precision?: number) => any;
    getBezierCurveLength: (bezierCurve: any, precision?: number) => any;
    polylineToBezierCurve: (polyline: any, close?: boolean, offsetA?: number, offsetB?: number) => false | any[][]
  }
  animationTimer: number | null
  animation: boolean
  workerPort: null
  backAnimator: AnimatorResult | undefined

  constructor (canvas, workerPort, info, chartId) {
    if (!canvas) {
      console.error('CRender Missing parameters!')

      return
    }

    // const ctx = canvas.getContext('2d')

    const { width, height } = info || canvas

    const area = [width, height]

    // canvas.setAttribute('width', clientWidth)
    // canvas.setAttribute('height', clientHeight)

    this.chartId = chartId

    this.ctx = canvas
    this.area = area
    this.animationStatus = false
    this.animation = true
    this.animationTimer = null
    this.graphs = []
    this.color = color
    this.bezierCurve = bezierCurve
    this.workerPort = workerPort

    this.backAnimator = animator.create({// Âª∫ËÆÆ‰ΩøÁî® this.getUIContext.creatAnimator()Êé•Âè£
      duration: 1000 / 60,
      easing: "linear",
      delay: 0,
      fill: "forwards",
      direction: "normal",
      iterations: 1,
      begin: 0,
      end: 1
    })

  }

  clearArea () {
    const { area } = this

    this.ctx.clearRect(0, 0, ...area)
  }
  add (config) {
    const time = Date.now()
    if (!config || !Object.keys(config).length) {
      console.error('add Missing parameters!')

      return
    }
    const { name } = config

    if (!name) {
      console.error('add Missing parameters!')

      return
    }

    const graphConfig = allGraph.get(name)
    if (!graphConfig) {
      console.warn('No corresponding graph configuration found!')

      return
    }

    const graph = new Graph(graphConfig, config)

    if (!graph.validator(graph)) return

    // graph.render = this

    this.graphs.push(graph)

    this.sortGraphsByIndex()

    // console.log('Êó∂Èó¥522', time522 - time)
    // this.drawAllGraph()

    return graph
  }

  sortGraphsByIndex () {
    const { graphs } = this

    graphs.sort((a, b) => {
      if (a.index > b.index) return 1
      if (a.index === b.index) return 0
      if (a.index < b.index) return -1
    })
  }

  delGraph (graph) {
    if (!graph || typeof graph.delProcessor !== 'function') return

    graph.delProcessor(this)

    this.graphs = this.graphs.filter(graph => graph)

    this.drawAllGraph()
  }

  delAllGraph () {
    this.graphs.forEach(graph => graph.delProcessor(this))

    this.graphs = this.graphs.filter(graph => graph)

    this.drawAllGraph()
  }

  drawAllGraph (flag = true) {
    const { workerPort, ctx } = this
    this.clearArea()
    this.graphs.filter(graph => graph && graph.visible).forEach(graph => graph.drawProcessor(this, graph))

    if (workerPort) {
      // let image = ctx.transferToImageBitmap()
      // workerPort.postMessage({ myImage: image });
    }
  }

  launchAnimation () {
    const { animationStatus } = this

    if (animationStatus) return

    this.animationStatus = true

    // this.myWorker = new worker.ThreadWorker('../../../workers/Worker.ets');
    // emitter.on('animation-' + this.chartId, () => {
    //   animation.call(this, () => {
    //     // this.animationStatus = false
    //     // resolve()
    //   }, Date.now())
    // })
    // return new Promise<void>(resolve => {
    //
    // })
    lastTime = Date.now()
    animation.call(this, () => {
      // this.animationStatus = false
      // resolve()
    }, lastTime)
    const that = this
    this.backAnimator.onFinish = () => {
      const currTime = Date.now()
      animation.call(that, () => {
        // this.animationStatus = false
        // resolve()
      }, lastTime)
    }
    // this.backAnimator.play()
  }

  clone (graph) {
    // if (!graph) {
    //   graph = {}
    // }
    const style = graph.style.getStyle()

    let clonedGraph = { ...graph, style }

    delete clonedGraph.render

    clonedGraph = deepClone(clonedGraph, true)

    return this.add(clonedGraph)
  }

  checkLinePoint (point, activeIndex, lineIndex?) {
    point.graphs.forEach((item, i) => {
      item.forEach((linePointItem, index) => {
        if (!linePointItem.shape.oldR) {
          linePointItem.shape.oldR = linePointItem.shape.r
        }
        if (linePointItem.oldVisible === undefined) {
          linePointItem.oldVisible = linePointItem.visible
        }
        linePointItem.shape.r = linePointItem.shape.oldR
        linePointItem.visible = linePointItem.oldVisible
        if (lineIndex !== undefined ? lineIndex === i && index === activeIndex : index === activeIndex) {
          if (!linePointItem.visible) {
            linePointItem.visible = true
          }
          linePointItem.shape.r *= 1.5
        }
      })
    })
  }

  stopAnimation () {
    if (this.animationTimer) {
      clearInterval(this.animationTimer)
    }
    this.backAnimator.finish()
    this.animationStatus = false
    lastTime = null
  }
}

function animation (callback, timeStamp) {
  const { graphs, workerPort } = this
  if (!this.animationStatus) {
    // this.backAnimator && this.backAnimator.cancel()
    this.backAnimator.finish()
    lastTime = null
    if (this.myWorker) {
      this.myWorker.terminate()
      this.myWorker = null
    }
    return
  }
  if (!animationAble(graphs)) {
    // workerPort.close()
    // this.backAnimator && this.backAnimator.cancel()
    // this.backAnimator.finish()
    this.backAnimator.finish()
    lastTime = null
    if (this.myWorker) {
      this.myWorker.terminate()
      this.myWorker = null
    }
    this.animationStatus = false
    return
  }

  graphs.forEach(graph => graph.turnNextAnimationFrame(timeStamp))

  this.drawAllGraph()

  this.backAnimator.play()
  // if (this.animation) {
  //   this.animationTimer = requestAnimationFrame(animation.bind(this, callback, timeStamp), this.animation)
  // } else {
  //   animation.call(this, callback, timeStamp)
  // }
  // this.myWorker.postMessageWithSharedSendable({requestAnimationFrame: true, animation: this.animation, chartId: this.chartId});
}

function requestAnimationFrame (callback, animation) {
  const currTime = new Date().getTime();
  const timeToCall = animation ? Math.max(0, 30 - (currTime - lastTime)) : 0;
  const id = setTimeout(
    () => {
      callback(currTime + timeToCall);
    }, 1000 / 30);
  lastTime = currTime + timeToCall;
  return id;
}

function animationAble (graphs) {
  return graphs.find(graph => !graph.animationPause && graph.animationFrameState.length)
}

function mouseDown (e) {
  const { graphs } = this

  const hoverGraph = graphs.find(graph => graph.status === 'hover')

  if (!hoverGraph) return

  hoverGraph.status = 'active'
}


¿‘rDñÆ@ohos.animator∞../../util/color∑../../bezierCurve/indexÆ../plugin/util∞../config/graphs≠./graph.class‘rEó™assertions®external¢id§meta±moduleSideEffects™resolvedByµsyntheticNamedExportsA√Ÿ~ hvigor_ignore_D:_apps_deveco_devecostudio-windows-5.1.0.828_DevEco Studio_sdk_default_openharmony_ets_api_@ohos.animator.d.tsA√™oh-resolve¬EA¬Ÿ|D:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\util\color.tsA√™oh-resolve¬EA¬ŸÉD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\bezierCurve\index.tsA√™oh-resolve¬EA¬ŸÖD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\cRender\plugin\util.tsA√™oh-resolve¬EA¬ŸáD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\cRender\config\graphs.tsA√™oh-resolve¬EA¬ŸãD:\apps\deveco\tzb2025jbgs\oh_modules\.ohpm\@mcui+mccharts@2.8.9\oh_modules\@mcui\mccharts\src\main\ets\mcCore\cRender\class\graph.class.tsA√™oh-resolve¬ì‘rFñßversion§file™sourceRootßsources•names®mappings∞crender.class.js†ë∞crender.class.tsê‹ ‚ñî    î  î  î  î$  $î%  $ñî   î î î î1 1î2 1òî   î î	 	î î î î* *î+ *ñî   î î î î' 'î( 'ñî   î î î î! !î" !íî  
 îÃ[ 
Ã[ñî   î î î 5î% ÃAî& ÃBñî   î î î î î ñî   î î î î î ôî 0î 0î 0î 0î" 0!î$ 0#î( 0'î* 0)î1 00ïî î 
î î î ïî 1î 1î 1	î 1î 1òî 2î 2î 2î 2î 2î7 21î8 22î9 22íî 4î 4ëî	 5íî 7î. 7*úî 9î 9
î 9î 9î 9î 9î 9î" 9î& 9"î* 9&î0 9,î1 9,öî ;î ;
î ;î ;î ;î ;î ;î# ;î$ ; î% ; íî =î4 =0íî >î6 >2óî Ã@î Ã@î Ã@	î Ã@î Ã@î Ã@î Ã@óî ÃBî ÃBî ÃB	î ÃBî ÃBî ÃBî ÃBóî ÃCî ÃCî ÃC	î ÃCî ÃCî ÃCî ÃCóî ÃDî ÃDî ÃD	î ÃDî ÃDî$ ÃD î% ÃD óî ÃEî ÃEî ÃE	î ÃEî ÃEî ÃEî ÃEóî ÃFî ÃFî ÃF	î ÃFî ÃFî" ÃFî# ÃFóî ÃGî ÃGî ÃG	î ÃGî ÃGî ÃGî ÃGóî ÃHî ÃHî ÃH	î ÃHî ÃHî ÃHî ÃHóî ÃIî ÃIî ÃI	î ÃIî ÃIî& ÃI"î' ÃI"óî ÃJî ÃJî ÃJ	î ÃJî ÃJî$ ÃJ î% ÃJ ôî ÃLî ÃLî ÃL	î ÃLî ÃLî$ ÃL î% ÃL!î+ ÃL'î, ÃL(ñî ÃMî ÃMî ÃMî ÃMî ÃMî ÃMîî ÃNî ÃNî ÃNî ÃNîî ÃOî ÃOî ÃOî ÃOîî ÃPî ÃP
î ÃPî ÃPîî ÃQî ÃQî ÃQî ÃQîî ÃRî ÃRî ÃRî ÃRîî ÃSî ÃSî ÃSî ÃSîî ÃTî ÃT	î ÃTî ÃTìî	 ÃUî
 ÃUî ÃUíî ÃWî ÃWíî ÃYî ÃYòî ÃZî ÃZ
î ÃZî ÃZî ÃZî ÃZî ÃZî ÃZüî Ã\î Ã\î Ã\	î Ã\î Ã\î Ã\î Ã\î Ã\î Ã\î Ã\î! Ã\î$ Ã\ î( Ã\$î) Ã\%î* Ã\%íî Ã]î Ã]îî Ã^î Ã^î Ã^î Ã^ôî Ã_î Ã_
î Ã_î Ã_î Ã_î Ã_î Ã_î Ã_î  Ã_üî Ã`î Ã`î Ã`	î Ã`î Ã`î Ã`î Ã`î Ã`î# Ã`î$ Ã` î* Ã`&î+ Ã`'î, Ã`(î2 Ã`.î4 Ã`0òî Ãaî Ãaî Ãaî Ãaî Ãaî3 Ãa-î4 Ãa.î5 Ãa.íî Ãcî Ãcëî	 Ãdòî Ãeî Ãe
î Ãeî Ãeî Ãeî Ãeî Ãeî  Ãeïî Ãgî Ãgî Ãg	î Ãgî Ãgòî Ãhî Ãhî Ãhî Ãhî Ãhî3 Ãh-î4 Ãh.î5 Ãh.íî Ãjî Ãjëî	 Ãkõî Ãmî Ãm
î Ãmî Ãmî$ Ãm î% Ãm!î( Ãm$î) Ãm%î- Ãm)î. Ãm*î/ Ãm*ïî Ãnî Ãnî Ãn	î Ãnî Ãnòî Ãoî Ãoî Ãoî Ãoî ÃoîÃF ÃoÃ@îÃG ÃoÃAîÃH ÃoÃAíî Ãqî Ãqëî	 Ãrúî Ãtî Ãt
î Ãtî Ãtî Ãtî Ãtî  Ãtî+ Ãt'î- Ãt)î3 Ãt/î4 Ãt0î5 Ãt0ôî Ãvî Ãvî Ãv	î Ãvî Ãvî Ãvî Ãvî" Ãvî# Ãvíî Ãv!î Ãv'íî Ãxî Ãxöî Ãzî Ãzî Ãz	î Ãzî Ãzî Ãzî Ãzî Ãzî Ãzî  Ãzñî Ã|î Ã|î Ã|	î Ã|î  Ã|î! Ã|íî Ã~î/ Ã~+íî Ãî Ãîî ÃÅî ÃÅî ÃÅî ÃÅíî ÃÇî ÃÇíî ÃÑî ÃÑòî ÃÖî ÃÖ
î ÃÖî ÃÖî ÃÖî ÃÖî ÃÖî  ÃÖõî Ãáî Ãá
î Ãáî Ãáî Ãáî Ãáî Ãáî Ãáî Ãáî Ãáî Ãáôî Ãàî Ãà
î Ãàî Ãàî Ãàî Ãàî Ãàî Ãàî! Ãàîî Ãàî Ãà$î Ãà%î Ãà%ôî Ãâî Ãâ
î Ãâî Ãâî Ãâî Ãâî Ãâî Ãâî# Ãâîî Ãâî Ãâ&î Ãâ'î Ãâ'ôî Ãäî Ãä
î Ãäî Ãäî Ãäî Ãäî Ãäî Ãäî! Ãäïî Ãäî Ãä$î Ãä%î Ãä&î Ãä&îî Ããî	 Ããî
 Ããî Ããíî Ãåî Ãåîî Ãéî Ãé
î Ãéî Ãéõî Ãèî Ãèî Ãè	î Ãèî Ãèî Ãèî" Ãèî# Ãèî/ Ãè+î4 Ãè0î> Ãè:íî Ãè<î ÃèÃBòî Ãëî Ãë	î Ãë
î Ãëî Ãëî Ãëî  Ãëî! Ãë‹ î Ãìî Ãìî Ãì	î Ãìî Ãìî Ãìî Ãìî! Ãìî" Ãìî( Ãì$î) Ãì%î. Ãì*î/ Ãì+î1 Ãì-î2 Ãì.î7 Ãì3î8 Ãì4î9 Ãì4ñî Ãïî Ãïî Ãï	î Ãïî Ãïî Ãïíî Ãñî Ãñíî Ãòî Ãò‹ î Ãôî Ãôî Ãô	î Ãôî Ãôî Ãôî Ãôî! Ãôî" Ãôî$ Ãô î% Ãô!î* Ãô&î+ Ãô'î7 Ãô3î8 Ãô4î< Ãô8î= Ãô9î> Ãô:î? Ãô:‹ î Ãõî Ãõî Ãõ	î Ãõî Ãõî Ãõî Ãõî! Ãõî" Ãõî( Ãõ$î) Ãõ%î. Ãõ*î/ Ãõ+î1 Ãõ-î2 Ãõ.î7 Ãõ3î8 Ãõ4î9 Ãõ4ñî Ãùî Ãùî Ãù	î Ãùî Ãùî Ãùíî Ãûî Ãûñî Ã†î Ã†î Ã†î Ã†î Ã†î Ã†öî Ã°î Ã°
î Ã°î Ã°î Ã°î Ã°î! Ã°î$ Ã° î( Ã°$î) Ã°$ñî Ã¢î Ã¢î Ã¢	î Ã¢î Ã¢î Ã¢‹ "î Ã£î Ã£î Ã£	î Ã£î Ã£î Ã£î Ã£î  Ã£î! Ã£î# Ã£î$ Ã£ î) Ã£%î- Ã£)î2 Ã£.î3 Ã£/î: Ã£6î; Ã£7î< Ã£8îÃC Ã£?îÃD Ã£Ã@îÃI Ã£ÃEîÃJ Ã£ÃFîÃL Ã£ÃHîÃM Ã£ÃIîÃR Ã£ÃNîÃS Ã£ÃOîÃ` Ã£Ã\îÃa Ã£Ã]îÃe Ã£ÃaîÃg Ã£ÃcîÃl Ã£ÃhîÃm Ã£ÃiîÃn Ã£ÃjîÃo Ã£Ãjîî Ã•î Ã•î Ã•î Ã•íî Ã¶î6 Ã¶0íî Ãßî: Ãß4ëî	 Ã®íî Ã©î Ã©íî Ã´î Ã´òî Ã¨î Ã¨
î Ã¨î Ã¨î! Ã¨î$ Ã¨ î( Ã¨$î) Ã¨$ìî ÃÆî ÃÆî ÃÆíî ÃÆî ÃÆóî Ã∞î Ã∞î Ã∞	î Ã∞î Ã∞î# Ã∞î$ Ã∞íî Ã≤îÃR Ã≤ÃNíî Ã≥î: Ã≥6íî Ã¥î) Ã¥%íî Ãµî. Ãµ*íî Ã∂î Ã∂íî Ã∑î Ã∑íî Ã∏î Ã∏	íî Ãπî0 Ãπ,íî Ã∫î
 Ã∫íî Ãªî Ãª	òî Ãºî Ãºî Ãºî Ãºî Ãºî Ãºî Ãºî Ãºôî ÃΩî ÃΩî ÃΩî ÃΩî ÃΩî ÃΩî ÃΩî  ÃΩî" ÃΩíî Ãæî+ Ãæ%íî Ãøî Ãøñî Ã¿î	 Ã¿î Ã¿î Ã¿î Ã¿î Ã¿ñî Ã¡î Ã¡
î Ã¡î Ã¡î Ã¡î Ã¡ôî Ã¬î Ã¬î Ã¬	î Ã¬î Ã¬î" Ã¬î% Ã¬!î( Ã¬$î* Ã¬&ôî Ã√î Ã√î Ã√î Ã√î! Ã√î" Ã√î% Ã√î' Ã√!î( Ã√!ôî Ãƒî Ãƒî Ãƒî Ãƒî Ãƒî Ãƒî! Ãƒî$ Ãƒî& Ãƒ íî Ã≈î/ Ã≈'íî Ã∆î Ã∆ñî Ã«î Ã«î Ã«	î Ã«î Ã«î Ã«ìî Ã»î	 Ã»î
 Ã»íî Ã…î# Ã…íî Ã î Ã îî ÃÃî	 ÃÃî
 ÃÃ	î ÃÃíî ÃÕî ÃÕíî ÃŒî ÃŒíî Ãœî Ãœõî Ã–î Ã–
î Ã–î Ã–î Ã–î Ã–î! Ã–î" Ã–î* Ã–&î, Ã–(î- Ã–(õî Ã“î Ã“î Ã“î Ã“î Ã“î Ã“î$ Ã“ î& Ã“"î+ Ã“'î- Ã“)î. Ã“)ñî Ã‘î Ã‘î Ã‘î Ã‘î! Ã‘î" Ã‘öî Ã÷î Ã÷î Ã÷î Ã÷î  Ã÷î+ Ã÷'î- Ã÷)î1 Ã÷-î2 Ã÷.î3 Ã÷.ôî Ãÿî Ãÿî Ãÿî Ãÿî Ãÿî Ãÿî# Ãÿî$ Ãÿ î% Ãÿ íî ÃŸî ÃŸòî Ã€î Ã€î Ã€î Ã€î Ã€î% Ã€$î' Ã€&î0 Ã€0ùî Ã‹î Ã‹	î Ã‹
î Ã‹î Ã‹î Ã‹î Ã‹î Ã‹î" Ã‹î$ Ã‹ î% Ã‹!î' Ã‹#î) Ã‹%õî Ã›î Ã›
î Ã›î Ã›î Ã›î Ã›î' Ã›!î) Ã›#î. Ã›(î0 Ã›*î2 Ã›,ôî Ãﬁî Ãﬁî Ãﬁî" Ãﬁî# Ãﬁî( Ãﬁ î) Ãﬁ!î- Ãﬁ%î/ Ãﬁ'ùî Ãﬂ
î! Ãﬂî" Ãﬂî' Ãﬂî( Ãﬂî, Ãﬂ"î/ Ãﬂ%î< Ãﬂ2î= Ãﬂ3îÃB Ãﬂ8îÃC Ãﬂ9îÃD Ãﬂ:îÃE Ãﬂ:ëî Ã‡	òî Ã·î Ã·î! Ã·î" Ã·î, Ã·$î1 Ã·)î: Ã·2î< Ã·4ôî Ã‚
î! Ã‚î" Ã‚î, Ã‚"î/ Ã‚%î< Ã‚2î= Ã‚3îÃD Ã‚:îÃE Ã‚:ëî Ã„	ùî Ã‰î Ã‰î Ã‰î# Ã‰î$ Ã‰î% Ã‰î( Ã‰ î5 Ã‰-î6 Ã‰.î; Ã‰3î< Ã‰4îÃ@ Ã‰8îÃA Ã‰8ôî ÃÂî ÃÂî ÃÂî% ÃÂî( ÃÂ î5 ÃÂ-î6 ÃÂ.îÃ@ ÃÂ8îÃA ÃÂ8‹ î ÃÊî ÃÊî ÃÊî" ÃÊî+ ÃÊ#î, ÃÊ$î- ÃÊ%î. ÃÊ&î7 ÃÊ/î< ÃÊ4î= ÃÊ5îÃA ÃÊ9îÃF ÃÊ>îÃK ÃÊÃCîÃV ÃÊÃNîÃW ÃÊÃOîÃX ÃÊÃPîÃY ÃÊÃQîÃ^ ÃÊÃVîÃc ÃÊÃ[îÃn ÃÊÃfîÃp ÃÊÃhóî ÃÁ
î ÃÁî ÃÁî& ÃÁî' ÃÁî. ÃÁ$î0 ÃÁ&óî ÃËî% ÃËî& ÃËî- ÃË!î0 ÃË$î4 ÃË(î5 ÃË(ëî ÃÈôî ÃÍ
î! ÃÍî" ÃÍî' ÃÍî( ÃÍî) ÃÍî- ÃÍ#î0 ÃÍ&î1 ÃÍ&ëî ÃÎ	îî ÃÏî ÃÏî ÃÏî ÃÏîî ÃÌî	 ÃÌî
 ÃÌî ÃÌíî ÃÓî ÃÓíî Ãî Ãñî ÃÒî ÃÒî ÃÒî ÃÒî ÃÒî! ÃÒòî ÃÚî ÃÚî ÃÚî ÃÚî ÃÚî- ÃÚ'î. ÃÚ(î/ ÃÚ(ëî	 ÃÛòî ÃÙî ÃÙî ÃÙ	î ÃÙî ÃÙî  ÃÙî" ÃÙî# ÃÙóî Ãıî Ãıî Ãı	î Ãıî Ãıî$ Ãı î% Ãı ïî Ãˆî Ãˆî Ãˆî Ãˆî Ãˆíî Ã˜î Ã˜ëî Ã¯óî  Ã˙ î	 Ã˙	î Ã˙î Ã˙î Ã˙î Ã˙î& Ã˙'öî Ã˚î
 Ã˚î Ã˚
î Ã˚î Ã˚î Ã˚î  Ã˚î# Ã˚!î' Ã˚%î( Ã˚%óî Ã¸î Ã¸î	 Ã¸î Ã¸î Ã¸î Ã¸î Ã¸íî Ã˝î: Ã˝6òî Ã˛î Ã˛î Ã˛	î Ã˛î Ã˛î  Ã˛î" Ã˛î# Ã˛ïî Ãˇî Ãˇî Ãˇî Ãˇî Ãˇñî Õ î Õ î Õ î Õ î Õ î Õ òî Õî Õ
î Õî Õî Õî# Õî% Õî& Õóî Õî Õ
î Õî Õî Õî  Õî! Õëî	 Õíî Õî Õ
ëî Õòî Õî Õî	 Õî Õî Õî Õî Õî  Õíî Õî Õíî Õî: Õ6íî Õ	î% Õ	!òî Õ
î Õ
î Õ
	î Õ
î Õ
î  Õ
î" Õ
î# Õ
ïî Õî Õî Õî Õî Õñî Õî Õî Õî Õî Õî Õòî Õî Õ
î Õî Õî Õî# Õî% Õî& Õóî Õî Õ
î Õî Õî Õî  Õî! Õëî	 Õóî Õî Õî Õ	î Õî Õî$ Õ î% Õ íî Õî Õ
ëî Õ‹ î Õî
 Õî Õ	î Õî Õî Õî Õî Õî Õî! Õî" Õ î8 Õ6î9 Õ7îÃB ÕÃ@îÃC ÕÃAîÃD ÕÃBîÃE ÕÃBñî Õî Õî	 Õî Õî Õî Õòî Õî Õî	 Õî Õî Õî Õî Õî Õíî Õî Õíî ÕîÃo ÕÃmíî Õî Õíî Õî2 Õ0íî Õî Õíî ÕîÃÑ ÕÃÇíî  Õ î Õóî  Õ! î	 Õ!	î Õ!î Õ! î' Õ!(î) Õ!*î2 Õ!3õî Õ"î
 Õ"î Õ"î Õ"î Õ"î Õ"î Õ"î  Õ"î' Õ"%î) Õ"'î* Õ"(‹ î Õ#î
 Õ#î Õ#î Õ#î  Õ#î! Õ#î" Õ# î# Õ#!î' Õ#%î( Õ#&î+ Õ#)î, Õ#*î- Õ#+î/ Õ#-î1 Õ#/î4 Õ#2î5 Õ#3î= Õ#;îÃ@ Õ#>îÃH Õ#ÃFîÃI Õ#ÃGîÃJ Õ#ÃHîÃK Õ#ÃIîÃL Õ#ÃJîÃM Õ#ÃKîÃN Õ#ÃLîÃO Õ#ÃMòî Õ$î
 Õ$î Õ$
î Õ$î Õ$î Õ%î Õ%î Õ%	òî Õ&î Õ&î Õ&î Õ&î Õ&î& Õ&$î' Õ&%î( Õ&&òî Õ'î Õ'î Õ'î Õ'î Õ'î Õ'î Õ'î Õ'óî Õ(î Õ(
î Õ(î Õ(î Õ(î$ Õ("î% Õ(#îî Õ)î Õ)	î Õ)î Õ)íî  Õ* î Õ*ïî  Õ, î	 Õ,	î Õ,î Õ,î Õ,‹ î Õ-î Õ-	î Õ-î Õ-î Õ-î Õ-î Õ-î Õ-î Õ-î  Õ-î! Õ-î& Õ-$î' Õ-%î5 Õ-3î9 Õ-7î> Õ-<î? Õ-=îÃR Õ-ÃPîÃS Õ-ÃQîÃY Õ-ÃWîÃZ Õ-ÃXîÃ[ Õ-ÃXíî  Õ. î Õ.ïî  Õ0 î	 Õ0	î Õ0î Õ0î Õ0òî Õ1î
 Õ1î Õ1
î Õ1î Õ1î Õ1î Õ1î Õ1‹ î Õ3î
 Õ3î Õ3î Õ3î Õ3î Õ3î" Õ3 î# Õ3!î( Õ3&î) Õ3'î+ Õ3)î, Õ3*î1 Õ3/î2 Õ30î8 Õ36î= Õ3;îÃD Õ3ÃBîÃE Õ3ÃCîÃF Õ3ÃCîî Õ5î Õ5î	 Õ5î Õ5íî Õ5î Õ5óî Õ7î Õ7î Õ7î Õ7î Õ7î  Õ7î! Õ7íî  Õ8 î Õ8‘rGñßversion§fileßsourcesÆsourcesContent•names®mappings¿ë¿ë¿ê‹ „ëî    ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî  	 ëî  
 ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî   ëî    ëî  ! ëî  " ëî  # ëî  $ ëî  % ëî  & ëî  ' ëî  ( ëî  ) ëî  * ëî  + ëî  , ëî  - ëî  . ëî  / ëî  0 ëî  1 ëî  2 ëî  3 ëî  4 ëî  5 ëî  6 ëî  7 ëî  8 ëî  9 ëî  : ëî  ; ëî  < ëî  = ëî  > ëî  ? ëî  Ã@ ëî  ÃA ëî  ÃB ëî  ÃC ëî  ÃD ëî  ÃE ëî  ÃF ëî  ÃG ëî  ÃH ëî  ÃI ëî  ÃJ ëî  ÃK ëî  ÃL ëî  ÃM ëî  ÃN ëî  ÃO ëî  ÃP ëî  ÃQ ëî  ÃR ëî  ÃS ëî  ÃT ëî  ÃU ëî  ÃV ëî  ÃW ëî  ÃX ëî  ÃY ëî  ÃZ ëî  Ã[ ëî  Ã\ ëî  Ã] ëî  Ã^ ëî  Ã_ ëî  Ã` ëî  Ãa ëî  Ãb ëî  Ãc ëî  Ãd ëî  Ãe ëî  Ãf ëî  Ãg ëî  Ãh ëî  Ãi ëî  Ãj ëî  Ãk ëî  Ãl ëî  Ãm ëî  Ãn ëî  Ão ëî  Ãp ëî  Ãq ëî  Ãr ëî  Ãs ëî  Ãt ëî  Ãu ëî  Ãv ëî  Ãw ëî  Ãx ëî  Ãy ëî  Ãz ëî  Ã{ ëî  Ã| ëî  Ã} ëî  Ã~ ëî  Ã ëî  ÃÄ ëî  ÃÅ ëî  ÃÇ ëî  ÃÉ ëî  ÃÑ ëî  ÃÖ ëî  ÃÜ ëî  Ãá ëî  Ãà ëî  Ãâ ëî  Ãä ëî  Ãã ëî  Ãå ëî  Ãç ëî  Ãé ëî  Ãè ëî  Ãê ëî  Ãë ëî  Ãí ëî  Ãì ëî  Ãî ëî  Ãï ëî  Ãñ ëî  Ãó ëî  Ãò ëî  Ãô ëî  Ãö ëî  Ãõ ëî  Ãú ëî  Ãù ëî  Ãû ëî  Ãü ëî  Ã† ëî  Ã° ëî  Ã¢ ëî  Ã£ ëî  Ã§ ëî  Ã• ëî  Ã¶ ëî  Ãß ëî  Ã® ëî  Ã© ëî  Ã™ ëî  Ã´ ëî  Ã¨ ëî  Ã≠ ëî  ÃÆ ëî  ÃØ ëî  Ã∞ ëî  Ã± ëî  Ã≤ ëî  Ã≥ ëî  Ã¥ ëî  Ãµ ëî  Ã∂ ëî  Ã∑ ëî  Ã∏ ëî  Ãπ ëî  Ã∫ ëî  Ãª ëî  Ãº ëî  ÃΩ ëî  Ãæ ëî  Ãø ëî  Ã¿ ëî  Ã¡ ëî  Ã¬ ëî  Ã√ ëî  Ãƒ ëî  Ã≈ ëî  Ã∆ ëî  Ã« ëî  Ã» ëî  Ã… ëî  Ã  ëî  ÃÀ ëî  ÃÃ ëî  ÃÕ ëî  ÃŒ ëî  Ãœ ëî  Ã– ëî  Ã— ëî  Ã“ ëî  Ã” ëî  Ã‘ ëî  Ã’ ëî  Ã÷ ëî  Ã◊ ëî  Ãÿ ëî  ÃŸ ëî  Ã⁄ ëî  Ã€ ëî  Ã‹ ëî  Ã› ëî  Ãﬁ ëî  Ãﬂ ëî  Ã‡ ëî  Ã· ëî  Ã‚ ‘rHíßmissing¶plugin√¶genAbc¬ê‘  ‘rIî≤dynamicImportCacheπexportAllDeclarationCacheªexportNamedDeclarationCache´importCacheêêêñ‘rJï§type•start£end™specifiers¶source±ImportDeclaration %ë‘rKî§type•start£end•local∂ImportDefaultSpecifier‘rLî§type•start£end§name™Identifier•color‘rMï§type•start£end•value£rawßLiteral$∞../../util/color≤'../../util/color'J±ImportDeclaration'ÃYëK∂ImportDefaultSpecifier.9L™Identifier.9´bezierCurveMßLiteral?ÃX∑../../bezierCurve/indexπ'../../bezierCurve/index'J±ImportDeclarationÃ[ÃÜë‘rNï§type•start£end®imported•localØImportSpecifierÃdÃmL™IdentifierÃdÃm©deepCloneL™IdentifierÃdÃm©deepCloneMßLiteralÃuÃÖÆ../plugin/util∞'../plugin/util'J±ImportDeclarationÃàÃ∞ëK∂ImportDefaultSpecifierÃèÃóL™IdentifierÃèÃó®allGraphMßLiteralÃùÃØ∞../config/graphs≤'../config/graphs'J±ImportDeclarationÃ≤Ã‘ëK∂ImportDefaultSpecifierÃπÃæL™IdentifierÃπÃæ•GraphMßLiteralÃƒÃ”≠./graph.classØ'./graph.class'J±ImportDeclarationÕ3ÕYëK∂ImportDefaultSpecifierÕ:ÕBL™IdentifierÕ:ÕB®animatorMßLiteralÕHÕXÆ@ohos.animator∞"@ohos.animator"